# üì¶ Required Imports
import os
import json
from fpdf import FPDF
from datetime import datetime

# üìÅ Paths
CLEANED_REPORTS_PATH = "outputs/cleaned_reports.json"
PREDICTED_LABELS_PATH = "outputs/predicted_labels.json"
OUTPUT_DIR = "outputs/generated_reports"
FONT_PATH = "fonts/Arial.ttf"

os.makedirs(OUTPUT_DIR, exist_ok=True)

# üìú PDF Class
class PDF(FPDF):
    def __init__(self):
        super().__init__()
        self.add_font("ArialUnicode", "", FONT_PATH, uni=True)

    def header(self):
        self.set_font("ArialUnicode", "", 14)
        self.cell(0, 10, "Brain MRI Diagnostic Report", ln=True, align="C")
        self.ln(5)

    def chapter_title(self, title):
        self.set_font("ArialUnicode", "", 13)
        self.cell(0, 10, title, ln=True)
        self.ln(2)

    def chapter_body(self, text):
        self.set_font("ArialUnicode", "", 12)
        self.multi_cell(0, 8, text)
        self.ln(4)

    def footer(self):
        self.set_y(-15)
        self.set_font("ArialUnicode", "", 8)
        self.cell(0, 10, "Generated by AI Assistant", align="C")

# üìÑ Load JSON files
def load_json(path):
    with open(path, "r") as f:
        return json.load(f)

# üìÑ Generate PDF for each patient
def generate_pdf(patient_info, prediction_info, idx):
    pdf = PDF()
    pdf.add_page()

    now = datetime.now().strftime("%d %B %Y - %H:%M")

    # General Info
    pdf.chapter_title("General Information")
    pdf.set_font("ArialUnicode", "", 12)
    pdf.cell(0, 10, f"Date & Time: {now}", ln=True)
    pdf.cell(0, 10, f"Patient Age: {patient_info.get('age', 'N/A')}", ln=True)
    pdf.cell(0, 10, f"Patient Sex: {patient_info.get('sex', 'N/A')}", ln=True)
    pdf.cell(0, 10, f"Patient Race: {patient_info.get('race', 'N/A')}", ln=True)
    pdf.cell(0, 10, f"Year of Study: {patient_info.get('year', 'N/A')}", ln=True)
    pdf.ln(5)

    # Model Prediction
    pdf.chapter_title("Model Prediction")
    predicted_class = prediction_info.get("predicted_class", "Unknown")
    confidence = prediction_info.get("confidence", 0.0)
    pdf.set_font("ArialUnicode", "", 12)
    pdf.cell(0, 10, f"Predicted Tumor Type: {predicted_class}", ln=True)
    pdf.cell(0, 10, f"Confidence: {confidence}%", ln=True)

    # ‚ö†Ô∏è Warning for low confidence
    if confidence < 60:
        pdf.ln(3)
        pdf.set_font("ArialUnicode", "", 12)
        pdf.set_text_color(255, 0, 0)
        pdf.multi_cell(0, 10, "‚ö†Ô∏è Warning:\nThe model's confidence is low. It is strongly recommended to consult a medical professional.")
        pdf.set_text_color(0, 0, 0)
        pdf.ln(3)

    # Report Details
    pdf.chapter_title("Report Details")
    pdf.chapter_body(patient_info.get("report", "[No Report Available]"))

    # Conclusion
    pdf.chapter_title("Conclusion")
    pdf.chapter_body(patient_info.get("conclusion", "[No Conclusion Available]"))

    # Recommendations
    pdf.chapter_title("Recommendations")
    pdf.chapter_body(patient_info.get("recommendations", "[No Recommendations Available]"))

    # Save PDF
    output_path = os.path.join(OUTPUT_DIR, f"report_{idx}.pdf")
    pdf.output(output_path)

    print(f"‚úÖ Saved: {output_path}")

# üöÄ Main
def main():
    patients = load_json(CLEANED_REPORTS_PATH)
    predictions = load_json(PREDICTED_LABELS_PATH)

    print(f"‚úÖ Loaded {len(patients)} cleaned reports.")
    print(f"‚úÖ Loaded {len(predictions)} predictions.")

    # Mapping for easier match
    prediction_map = {}
    for item in predictions:
        patient_id = item["patient_id"]
        prediction_map[patient_id] = item

    for idx, patient_info in enumerate(patients, start=1):
        # Match prediction
        prediction_info = prediction_map.get(patient_info.get("patient_id"), {
            "predicted_class": "Unknown",
            "confidence": 0.0
        })

        generate_pdf(patient_info, prediction_info, idx)

if __name__ == "__main__":
    main()